'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="Database1")>  _
Partial Public Class Database1DataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertCustomer(instance As Customer)
    End Sub
  Partial Private Sub UpdateCustomer(instance As Customer)
    End Sub
  Partial Private Sub DeleteCustomer(instance As Customer)
    End Sub
  Partial Private Sub InsertPayment(instance As Payment)
    End Sub
  Partial Private Sub UpdatePayment(instance As Payment)
    End Sub
  Partial Private Sub DeletePayment(instance As Payment)
    End Sub
  Partial Private Sub InsertCart(instance As Cart)
    End Sub
  Partial Private Sub UpdateCart(instance As Cart)
    End Sub
  Partial Private Sub DeleteCart(instance As Cart)
    End Sub
  Partial Private Sub InsertFoodCart(instance As FoodCart)
    End Sub
  Partial Private Sub UpdateFoodCart(instance As FoodCart)
    End Sub
  Partial Private Sub DeleteFoodCart(instance As FoodCart)
    End Sub
  Partial Private Sub InsertOrderDetail(instance As OrderDetail)
    End Sub
  Partial Private Sub UpdateOrderDetail(instance As OrderDetail)
    End Sub
  Partial Private Sub DeleteOrderDetail(instance As OrderDetail)
    End Sub
  Partial Private Sub InsertFood(instance As Food)
    End Sub
  Partial Private Sub UpdateFood(instance As Food)
    End Sub
  Partial Private Sub DeleteFood(instance As Food)
    End Sub
  Partial Private Sub InsertStaff(instance As Staff)
    End Sub
  Partial Private Sub UpdateStaff(instance As Staff)
    End Sub
  Partial Private Sub DeleteStaff(instance As Staff)
    End Sub
  Partial Private Sub InsertDelivery(instance As Delivery)
    End Sub
  Partial Private Sub UpdateDelivery(instance As Delivery)
    End Sub
  Partial Private Sub DeleteDelivery(instance As Delivery)
    End Sub
  Partial Private Sub InsertOrder(instance As [Order])
    End Sub
  Partial Private Sub UpdateOrder(instance As [Order])
    End Sub
  Partial Private Sub DeleteOrder(instance As [Order])
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.Testing.My.MySettings.Default.Database1ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Customers() As System.Data.Linq.Table(Of Customer)
		Get
			Return Me.GetTable(Of Customer)
		End Get
	End Property
	
	Public ReadOnly Property Payments() As System.Data.Linq.Table(Of Payment)
		Get
			Return Me.GetTable(Of Payment)
		End Get
	End Property
	
	Public ReadOnly Property Carts() As System.Data.Linq.Table(Of Cart)
		Get
			Return Me.GetTable(Of Cart)
		End Get
	End Property
	
	Public ReadOnly Property FoodCarts() As System.Data.Linq.Table(Of FoodCart)
		Get
			Return Me.GetTable(Of FoodCart)
		End Get
	End Property
	
	Public ReadOnly Property OrderDetails() As System.Data.Linq.Table(Of OrderDetail)
		Get
			Return Me.GetTable(Of OrderDetail)
		End Get
	End Property
	
	Public ReadOnly Property Foods() As System.Data.Linq.Table(Of Food)
		Get
			Return Me.GetTable(Of Food)
		End Get
	End Property
	
	Public ReadOnly Property Staffs() As System.Data.Linq.Table(Of Staff)
		Get
			Return Me.GetTable(Of Staff)
		End Get
	End Property
	
	Public ReadOnly Property Deliveries() As System.Data.Linq.Table(Of Delivery)
		Get
			Return Me.GetTable(Of Delivery)
		End Get
	End Property
	
	Public ReadOnly Property Orders() As System.Data.Linq.Table(Of [Order])
		Get
			Return Me.GetTable(Of [Order])
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Customer")>  _
Partial Public Class Customer
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _custID As Integer
	
	Private _fullName As String
	
	Private _email As String
	
	Private _phoneNo As String
	
	Private _address As String
	
	Private _username As String
	
	Private _password As String
	
	Private _Carts As EntityRef(Of Cart)
	
	Private _Orders As EntitySet(Of [Order])
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OncustIDChanging(value As Integer)
    End Sub
    Partial Private Sub OncustIDChanged()
    End Sub
    Partial Private Sub OnfullNameChanging(value As String)
    End Sub
    Partial Private Sub OnfullNameChanged()
    End Sub
    Partial Private Sub OnemailChanging(value As String)
    End Sub
    Partial Private Sub OnemailChanged()
    End Sub
    Partial Private Sub OnphoneNoChanging(value As String)
    End Sub
    Partial Private Sub OnphoneNoChanged()
    End Sub
    Partial Private Sub OnaddressChanging(value As String)
    End Sub
    Partial Private Sub OnaddressChanged()
    End Sub
    Partial Private Sub OnusernameChanging(value As String)
    End Sub
    Partial Private Sub OnusernameChanged()
    End Sub
    Partial Private Sub OnpasswordChanging(value As String)
    End Sub
    Partial Private Sub OnpasswordChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Carts = CType(Nothing, EntityRef(Of Cart))
		Me._Orders = New EntitySet(Of [Order])(AddressOf Me.attach_Orders, AddressOf Me.detach_Orders)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_custID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property custID() As Integer
		Get
			Return Me._custID
		End Get
		Set
			If ((Me._custID = value)  _
						= false) Then
				Me.OncustIDChanging(value)
				Me.SendPropertyChanging
				Me._custID = value
				Me.SendPropertyChanged("custID")
				Me.OncustIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fullName", DbType:="VarChar(50)")>  _
	Public Property fullName() As String
		Get
			Return Me._fullName
		End Get
		Set
			If (String.Equals(Me._fullName, value) = false) Then
				Me.OnfullNameChanging(value)
				Me.SendPropertyChanging
				Me._fullName = value
				Me.SendPropertyChanged("fullName")
				Me.OnfullNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_email", DbType:="VarChar(50)")>  _
	Public Property email() As String
		Get
			Return Me._email
		End Get
		Set
			If (String.Equals(Me._email, value) = false) Then
				Me.OnemailChanging(value)
				Me.SendPropertyChanging
				Me._email = value
				Me.SendPropertyChanged("email")
				Me.OnemailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_phoneNo", DbType:="VarChar(50)")>  _
	Public Property phoneNo() As String
		Get
			Return Me._phoneNo
		End Get
		Set
			If (String.Equals(Me._phoneNo, value) = false) Then
				Me.OnphoneNoChanging(value)
				Me.SendPropertyChanging
				Me._phoneNo = value
				Me.SendPropertyChanged("phoneNo")
				Me.OnphoneNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_address", DbType:="VarChar(MAX)")>  _
	Public Property address() As String
		Get
			Return Me._address
		End Get
		Set
			If (String.Equals(Me._address, value) = false) Then
				Me.OnaddressChanging(value)
				Me.SendPropertyChanging
				Me._address = value
				Me.SendPropertyChanged("address")
				Me.OnaddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_username", DbType:="VarChar(50)")>  _
	Public Property username() As String
		Get
			Return Me._username
		End Get
		Set
			If (String.Equals(Me._username, value) = false) Then
				Me.OnusernameChanging(value)
				Me.SendPropertyChanging
				Me._username = value
				Me.SendPropertyChanged("username")
				Me.OnusernameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_password", DbType:="VarChar(50)")>  _
	Public Property password() As String
		Get
			Return Me._password
		End Get
		Set
			If (String.Equals(Me._password, value) = false) Then
				Me.OnpasswordChanging(value)
				Me.SendPropertyChanging
				Me._password = value
				Me.SendPropertyChanged("password")
				Me.OnpasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Customer_Cart", Storage:="_Carts", ThisKey:="custID", OtherKey:="custID", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property Carts() As Cart
		Get
			Return Me._Carts.Entity
		End Get
		Set
			Dim previousValue As Cart = Me._Carts.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Carts.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Carts.Entity = Nothing
					previousValue.Customer = Nothing
				End If
				Me._Carts.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.Customer = Me
				End If
				Me.SendPropertyChanged("Carts")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Customer_Order1", Storage:="_Orders", ThisKey:="custID", OtherKey:="custID")>  _
	Public Property Orders() As EntitySet(Of [Order])
		Get
			Return Me._Orders
		End Get
		Set
			Me._Orders.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Orders(ByVal entity As [Order])
		Me.SendPropertyChanging
		entity.Customer = Me
	End Sub
	
	Private Sub detach_Orders(ByVal entity As [Order])
		Me.SendPropertyChanging
		entity.Customer = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Payment")>  _
Partial Public Class Payment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _paymentID As Integer
	
	Private _date As System.Nullable(Of Date)
	
	Private _amount As System.Nullable(Of Integer)
	
	Private _orderID As Integer
	
	Private _Order As EntityRef(Of [Order])
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnpaymentIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnpaymentIDChanged()
    End Sub
    Partial Private Sub OndateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndateChanged()
    End Sub
    Partial Private Sub OnamountChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnamountChanged()
    End Sub
    Partial Private Sub OnorderIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnorderIDChanged()
    End Sub
#End Region


    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property paymentID() As Integer
		Get
			Return Me._paymentID
		End Get
		Set
			If ((Me._paymentID = value)  _
						= false) Then
				Me.OnpaymentIDChanging(value)
				Me.SendPropertyChanging
				Me._paymentID = value
				Me.SendPropertyChanged("paymentID")
				Me.OnpaymentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="date", Storage:="_date", DbType:="Date")>  _
	Public Property [date]() As System.Nullable(Of Date)
		Get
			Return Me._date
		End Get
		Set
			If (Me._date.Equals(value) = false) Then
				Me.OndateChanging(value)
				Me.SendPropertyChanging
				Me._date = value
				Me.SendPropertyChanged("[date]")
				Me.OndateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_amount", DbType:="Int")>  _
	Public Property amount() As System.Nullable(Of Integer)
		Get
			Return Me._amount
		End Get
		Set
			If (Me._amount.Equals(value) = false) Then
				Me.OnamountChanging(value)
				Me.SendPropertyChanging
				Me._amount = value
				Me.SendPropertyChanged("amount")
				Me.OnamountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_orderID", DbType:="Int NOT NULL")>  _
	Public Property orderID() As Integer
		Get
			Return Me._orderID
		End Get
		Set
			If ((Me._orderID = value)  _
						= false) Then
				If Me._Order.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnorderIDChanging(value)
				Me.SendPropertyChanging
				Me._orderID = value
				Me.SendPropertyChanged("orderID")
				Me.OnorderIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Order1_Payment", Storage:="_Order", ThisKey:="orderID", OtherKey:="orderID", IsForeignKey:=true)>  _
	Public Property [Order]() As [Order]
		Get
			Return Me._Order.Entity
		End Get
		Set
			Dim previousValue As [Order] = Me._Order.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Order.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Order.Entity = Nothing
					previousValue.Payments.Remove(Me)
				End If
				Me._Order.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Payments.Add(Me)
					Me._orderID = value.orderID
				Else
					Me._orderID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("[Order]")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Cart")>  _
Partial Public Class Cart
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _cartID As Integer
	
	Private _custID As Integer
	
	Private _FoodCarts As EntitySet(Of FoodCart)
	
	Private _Customer As EntityRef(Of Customer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OncartIDChanging(value As Integer)
    End Sub
    Partial Private Sub OncartIDChanged()
    End Sub
    Partial Private Sub OncustIDChanging(value As Integer)
    End Sub
    Partial Private Sub OncustIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._FoodCarts = New EntitySet(Of FoodCart)(AddressOf Me.attach_FoodCarts, AddressOf Me.detach_FoodCarts)
		Me._Customer = CType(Nothing, EntityRef(Of Customer))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cartID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property cartID() As Integer
		Get
			Return Me._cartID
		End Get
		Set
			If ((Me._cartID = value)  _
						= false) Then
				Me.OncartIDChanging(value)
				Me.SendPropertyChanging
				Me._cartID = value
				Me.SendPropertyChanged("cartID")
				Me.OncartIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_custID", DbType:="Int NOT NULL")>  _
	Public Property custID() As Integer
		Get
			Return Me._custID
		End Get
		Set
			If ((Me._custID = value)  _
						= false) Then
				If Me._Customer.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OncustIDChanging(value)
				Me.SendPropertyChanging
				Me._custID = value
				Me.SendPropertyChanged("custID")
				Me.OncustIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cart_FoodCart", Storage:="_FoodCarts", ThisKey:="cartID", OtherKey:="cartID")>  _
	Public Property FoodCarts() As EntitySet(Of FoodCart)
		Get
			Return Me._FoodCarts
		End Get
		Set
			Me._FoodCarts.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Customer_Cart", Storage:="_Customer", ThisKey:="custID", OtherKey:="custID", IsForeignKey:=true)>  _
	Public Property Customer() As Customer
		Get
			Return Me._Customer.Entity
		End Get
		Set
			Dim previousValue As Customer = Me._Customer.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Customer.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Customer.Entity = Nothing
					previousValue.Carts = Nothing
				End If
				Me._Customer.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Carts = Me
					Me._custID = value.custID
				Else
					Me._custID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Customer")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_FoodCarts(ByVal entity As FoodCart)
		Me.SendPropertyChanging
		entity.Cart = Me
	End Sub
	
	Private Sub detach_FoodCarts(ByVal entity As FoodCart)
		Me.SendPropertyChanging
		entity.Cart = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FoodCart")>  _
Partial Public Class FoodCart
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _cartID As Integer
	
	Private _foodID As Integer
	
	Private _qtyAdded As System.Nullable(Of Integer)
	
	Private _Cart As EntityRef(Of Cart)
	
	Private _Food As EntityRef(Of Food)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OncartIDChanging(value As Integer)
    End Sub
    Partial Private Sub OncartIDChanged()
    End Sub
    Partial Private Sub OnfoodIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnfoodIDChanged()
    End Sub
    Partial Private Sub OnqtyAddedChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnqtyAddedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Cart = CType(Nothing, EntityRef(Of Cart))
		Me._Food = CType(Nothing, EntityRef(Of Food))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cartID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property cartID() As Integer
		Get
			Return Me._cartID
		End Get
		Set
			If ((Me._cartID = value)  _
						= false) Then
				If Me._Cart.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OncartIDChanging(value)
				Me.SendPropertyChanging
				Me._cartID = value
				Me.SendPropertyChanged("cartID")
				Me.OncartIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_foodID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property foodID() As Integer
		Get
			Return Me._foodID
		End Get
		Set
			If ((Me._foodID = value)  _
						= false) Then
				If Me._Food.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnfoodIDChanging(value)
				Me.SendPropertyChanging
				Me._foodID = value
				Me.SendPropertyChanged("foodID")
				Me.OnfoodIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_qtyAdded", DbType:="Int")>  _
	Public Property qtyAdded() As System.Nullable(Of Integer)
		Get
			Return Me._qtyAdded
		End Get
		Set
			If (Me._qtyAdded.Equals(value) = false) Then
				Me.OnqtyAddedChanging(value)
				Me.SendPropertyChanging
				Me._qtyAdded = value
				Me.SendPropertyChanged("qtyAdded")
				Me.OnqtyAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cart_FoodCart", Storage:="_Cart", ThisKey:="cartID", OtherKey:="cartID", IsForeignKey:=true)>  _
	Public Property Cart() As Cart
		Get
			Return Me._Cart.Entity
		End Get
		Set
			Dim previousValue As Cart = Me._Cart.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Cart.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Cart.Entity = Nothing
					previousValue.FoodCarts.Remove(Me)
				End If
				Me._Cart.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.FoodCarts.Add(Me)
					Me._cartID = value.cartID
				Else
					Me._cartID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Cart")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Food_FoodCart", Storage:="_Food", ThisKey:="foodID", OtherKey:="foodID", IsForeignKey:=true)>  _
	Public Property Food() As Food
		Get
			Return Me._Food.Entity
		End Get
		Set
			Dim previousValue As Food = Me._Food.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Food.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Food.Entity = Nothing
					previousValue.FoodCarts.Remove(Me)
				End If
				Me._Food.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.FoodCarts.Add(Me)
					Me._foodID = value.foodID
				Else
					Me._foodID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Food")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.OrderDetail")>  _
Partial Public Class OrderDetail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _orderID As Integer
	
	Private _foodID As Integer
	
	Private _qtyOrdered As System.Nullable(Of Integer)
	
	Private _Food As EntityRef(Of Food)
	
	Private _Order As EntityRef(Of [Order])
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnorderIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnorderIDChanged()
    End Sub
    Partial Private Sub OnfoodIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnfoodIDChanged()
    End Sub
    Partial Private Sub OnqtyOrderedChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnqtyOrderedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Food = CType(Nothing, EntityRef(Of Food))
		Me._Order = CType(Nothing, EntityRef(Of [Order]))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_orderID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property orderID() As Integer
		Get
			Return Me._orderID
		End Get
		Set
			If ((Me._orderID = value)  _
						= false) Then
				If Me._Order.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnorderIDChanging(value)
				Me.SendPropertyChanging
				Me._orderID = value
				Me.SendPropertyChanged("orderID")
				Me.OnorderIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_foodID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property foodID() As Integer
		Get
			Return Me._foodID
		End Get
		Set
			If ((Me._foodID = value)  _
						= false) Then
				If Me._Food.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnfoodIDChanging(value)
				Me.SendPropertyChanging
				Me._foodID = value
				Me.SendPropertyChanged("foodID")
				Me.OnfoodIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_qtyOrdered", DbType:="Int")>  _
	Public Property qtyOrdered() As System.Nullable(Of Integer)
		Get
			Return Me._qtyOrdered
		End Get
		Set
			If (Me._qtyOrdered.Equals(value) = false) Then
				Me.OnqtyOrderedChanging(value)
				Me.SendPropertyChanging
				Me._qtyOrdered = value
				Me.SendPropertyChanged("qtyOrdered")
				Me.OnqtyOrderedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Food_OrderDetail", Storage:="_Food", ThisKey:="foodID", OtherKey:="foodID", IsForeignKey:=true)>  _
	Public Property Food() As Food
		Get
			Return Me._Food.Entity
		End Get
		Set
			Dim previousValue As Food = Me._Food.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Food.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Food.Entity = Nothing
					previousValue.OrderDetails.Remove(Me)
				End If
				Me._Food.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.OrderDetails.Add(Me)
					Me._foodID = value.foodID
				Else
					Me._foodID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Food")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Order1_OrderDetail", Storage:="_Order", ThisKey:="orderID", OtherKey:="orderID", IsForeignKey:=true)>  _
	Public Property [Order]() As [Order]
		Get
			Return Me._Order.Entity
		End Get
		Set
			Dim previousValue As [Order] = Me._Order.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Order.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Order.Entity = Nothing
					previousValue.OrderDetails.Remove(Me)
				End If
				Me._Order.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.OrderDetails.Add(Me)
					Me._orderID = value.orderID
				Else
					Me._orderID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("[Order]")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Food")>  _
Partial Public Class Food
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _foodID As Integer
	
	Private _image As System.Data.Linq.Binary
	
	Private _name As String
	
	Private _description As String
	
	Private _price As System.Nullable(Of Integer)
	
	Private _FoodCarts As EntitySet(Of FoodCart)
	
	Private _OrderDetails As EntitySet(Of OrderDetail)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnfoodIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnfoodIDChanged()
    End Sub
    Partial Private Sub OnimageChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnimageChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub OnpriceChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnpriceChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._FoodCarts = New EntitySet(Of FoodCart)(AddressOf Me.attach_FoodCarts, AddressOf Me.detach_FoodCarts)
		Me._OrderDetails = New EntitySet(Of OrderDetail)(AddressOf Me.attach_OrderDetails, AddressOf Me.detach_OrderDetails)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_foodID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property foodID() As Integer
		Get
			Return Me._foodID
		End Get
		Set
			If ((Me._foodID = value)  _
						= false) Then
				Me.OnfoodIDChanging(value)
				Me.SendPropertyChanging
				Me._foodID = value
				Me.SendPropertyChanged("foodID")
				Me.OnfoodIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_image", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property image() As System.Data.Linq.Binary
		Get
			Return Me._image
		End Get
		Set
			If (Object.Equals(Me._image, value) = false) Then
				Me.OnimageChanging(value)
				Me.SendPropertyChanging
				Me._image = value
				Me.SendPropertyChanged("image")
				Me.OnimageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="VarChar(50)")>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="VarChar(MAX)")>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.OndescriptionChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("description")
				Me.OndescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_price", DbType:="Int")>  _
	Public Property price() As System.Nullable(Of Integer)
		Get
			Return Me._price
		End Get
		Set
			If (Me._price.Equals(value) = false) Then
				Me.OnpriceChanging(value)
				Me.SendPropertyChanging
				Me._price = value
				Me.SendPropertyChanged("price")
				Me.OnpriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Food_FoodCart", Storage:="_FoodCarts", ThisKey:="foodID", OtherKey:="foodID")>  _
	Public Property FoodCarts() As EntitySet(Of FoodCart)
		Get
			Return Me._FoodCarts
		End Get
		Set
			Me._FoodCarts.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Food_OrderDetail", Storage:="_OrderDetails", ThisKey:="foodID", OtherKey:="foodID")>  _
	Public Property OrderDetails() As EntitySet(Of OrderDetail)
		Get
			Return Me._OrderDetails
		End Get
		Set
			Me._OrderDetails.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_FoodCarts(ByVal entity As FoodCart)
		Me.SendPropertyChanging
		entity.Food = Me
	End Sub
	
	Private Sub detach_FoodCarts(ByVal entity As FoodCart)
		Me.SendPropertyChanging
		entity.Food = Nothing
	End Sub
	
	Private Sub attach_OrderDetails(ByVal entity As OrderDetail)
		Me.SendPropertyChanging
		entity.Food = Me
	End Sub
	
	Private Sub detach_OrderDetails(ByVal entity As OrderDetail)
		Me.SendPropertyChanging
		entity.Food = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Staff")>  _
Partial Public Class Staff
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _staffID As Integer
	
	Private _username As String
	
	Private _password As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnstaffIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnstaffIDChanged()
    End Sub
    Partial Private Sub OnusernameChanging(value As String)
    End Sub
    Partial Private Sub OnusernameChanged()
    End Sub
    Partial Private Sub OnpasswordChanging(value As String)
    End Sub
    Partial Private Sub OnpasswordChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_staffID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property staffID() As Integer
		Get
			Return Me._staffID
		End Get
		Set
			If ((Me._staffID = value)  _
						= false) Then
				Me.OnstaffIDChanging(value)
				Me.SendPropertyChanging
				Me._staffID = value
				Me.SendPropertyChanged("staffID")
				Me.OnstaffIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_username", DbType:="VarChar(50)")>  _
	Public Property username() As String
		Get
			Return Me._username
		End Get
		Set
			If (String.Equals(Me._username, value) = false) Then
				Me.OnusernameChanging(value)
				Me.SendPropertyChanging
				Me._username = value
				Me.SendPropertyChanged("username")
				Me.OnusernameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_password", DbType:="VarChar(50)")>  _
	Public Property password() As String
		Get
			Return Me._password
		End Get
		Set
			If (String.Equals(Me._password, value) = false) Then
				Me.OnpasswordChanging(value)
				Me.SendPropertyChanging
				Me._password = value
				Me.SendPropertyChanged("password")
				Me.OnpasswordChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Delivery")>  _
Partial Public Class Delivery
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _deliveryID As Integer
	
	Private _date As System.Nullable(Of Date)
	
	Private _time As System.Nullable(Of System.TimeSpan)
	
	Private _type As String
	
	Private _status As String
	
	Private _custName As String
	
	Private _custAddress As String
	
	Private _custPhoneNo As String
	
	Private _orderID As Integer
	
	Private _Order As EntityRef(Of [Order])
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OndeliveryIDChanging(value As Integer)
    End Sub
    Partial Private Sub OndeliveryIDChanged()
    End Sub
    Partial Private Sub OndateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndateChanged()
    End Sub
    Partial Private Sub OntimeChanging(value As System.Nullable(Of System.TimeSpan))
    End Sub
    Partial Private Sub OntimeChanged()
    End Sub
    Partial Private Sub OntypeChanging(value As String)
    End Sub
    Partial Private Sub OntypeChanged()
    End Sub
    Partial Private Sub OnstatusChanging(value As String)
    End Sub
    Partial Private Sub OnstatusChanged()
    End Sub
    Partial Private Sub OncustNameChanging(value As String)
    End Sub
    Partial Private Sub OncustNameChanged()
    End Sub
    Partial Private Sub OncustAddressChanging(value As String)
    End Sub
    Partial Private Sub OncustAddressChanged()
    End Sub
    Partial Private Sub OncustPhoneNoChanging(value As String)
    End Sub
    Partial Private Sub OncustPhoneNoChanged()
    End Sub
    Partial Private Sub OnorderIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnorderIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Order = CType(Nothing, EntityRef(Of [Order]))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_deliveryID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property deliveryID() As Integer
		Get
			Return Me._deliveryID
		End Get
		Set
			If ((Me._deliveryID = value)  _
						= false) Then
				Me.OndeliveryIDChanging(value)
				Me.SendPropertyChanging
				Me._deliveryID = value
				Me.SendPropertyChanged("deliveryID")
				Me.OndeliveryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="date", Storage:="_date", DbType:="Date")>  _
	Public Property [date]() As System.Nullable(Of Date)
		Get
			Return Me._date
		End Get
		Set
			If (Me._date.Equals(value) = false) Then
				Me.OndateChanging(value)
				Me.SendPropertyChanging
				Me._date = value
				Me.SendPropertyChanged("[date]")
				Me.OndateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_time", DbType:="Time")>  _
	Public Property time() As System.Nullable(Of System.TimeSpan)
		Get
			Return Me._time
		End Get
		Set
			If (Me._time.Equals(value) = false) Then
				Me.OntimeChanging(value)
				Me.SendPropertyChanging
				Me._time = value
				Me.SendPropertyChanged("time")
				Me.OntimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_type", DbType:="VarChar(50)")>  _
	Public Property type() As String
		Get
			Return Me._type
		End Get
		Set
			If (String.Equals(Me._type, value) = false) Then
				Me.OntypeChanging(value)
				Me.SendPropertyChanging
				Me._type = value
				Me.SendPropertyChanged("type")
				Me.OntypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="VarChar(50)")>  _
	Public Property status() As String
		Get
			Return Me._status
		End Get
		Set
			If (String.Equals(Me._status, value) = false) Then
				Me.OnstatusChanging(value)
				Me.SendPropertyChanging
				Me._status = value
				Me.SendPropertyChanged("status")
				Me.OnstatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_custName", DbType:="VarChar(50)")>  _
	Public Property custName() As String
		Get
			Return Me._custName
		End Get
		Set
			If (String.Equals(Me._custName, value) = false) Then
				Me.OncustNameChanging(value)
				Me.SendPropertyChanging
				Me._custName = value
				Me.SendPropertyChanged("custName")
				Me.OncustNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_custAddress", DbType:="VarChar(MAX)")>  _
	Public Property custAddress() As String
		Get
			Return Me._custAddress
		End Get
		Set
			If (String.Equals(Me._custAddress, value) = false) Then
				Me.OncustAddressChanging(value)
				Me.SendPropertyChanging
				Me._custAddress = value
				Me.SendPropertyChanged("custAddress")
				Me.OncustAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_custPhoneNo", DbType:="VarChar(50)")>  _
	Public Property custPhoneNo() As String
		Get
			Return Me._custPhoneNo
		End Get
		Set
			If (String.Equals(Me._custPhoneNo, value) = false) Then
				Me.OncustPhoneNoChanging(value)
				Me.SendPropertyChanging
				Me._custPhoneNo = value
				Me.SendPropertyChanged("custPhoneNo")
				Me.OncustPhoneNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_orderID", DbType:="Int NOT NULL")>  _
	Public Property orderID() As Integer
		Get
			Return Me._orderID
		End Get
		Set
			If ((Me._orderID = value)  _
						= false) Then
				If Me._Order.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnorderIDChanging(value)
				Me.SendPropertyChanging
				Me._orderID = value
				Me.SendPropertyChanged("orderID")
				Me.OnorderIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Order1_Delivery1", Storage:="_Order", ThisKey:="orderID", OtherKey:="orderID", IsForeignKey:=true)>  _
	Public Property [Order]() As [Order]
		Get
			Return Me._Order.Entity
		End Get
		Set
			Dim previousValue As [Order] = Me._Order.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Order.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Order.Entity = Nothing
					previousValue.Deliveries.Remove(Me)
				End If
				Me._Order.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Deliveries.Add(Me)
					Me._orderID = value.orderID
				Else
					Me._orderID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("[Order]")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.[Order]")>  _
Partial Public Class [Order]
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _orderID As Integer
	
	Private _orderDate As System.Nullable(Of Date)
	
	Private _orderTime As System.Nullable(Of System.TimeSpan)
	
	Private _status As String
	
	Private _custID As Integer
	
	Private _Payments As EntitySet(Of Payment)
	
	Private _OrderDetails As EntitySet(Of OrderDetail)
	
	Private _Deliveries As EntitySet(Of Delivery)
	
	Private _Customer As EntityRef(Of Customer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnorderIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnorderIDChanged()
    End Sub
    Partial Private Sub OnorderDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnorderDateChanged()
    End Sub
    Partial Private Sub OnorderTimeChanging(value As System.Nullable(Of System.TimeSpan))
    End Sub
    Partial Private Sub OnorderTimeChanged()
    End Sub
    Partial Private Sub OnstatusChanging(value As String)
    End Sub
    Partial Private Sub OnstatusChanged()
    End Sub
    Partial Private Sub OncustIDChanging(value As Integer)
    End Sub
    Partial Private Sub OncustIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Payments = New EntitySet(Of Payment)(AddressOf Me.attach_Payments, AddressOf Me.detach_Payments)
		Me._OrderDetails = New EntitySet(Of OrderDetail)(AddressOf Me.attach_OrderDetails, AddressOf Me.detach_OrderDetails)
		Me._Deliveries = New EntitySet(Of Delivery)(AddressOf Me.attach_Deliveries, AddressOf Me.detach_Deliveries)
		Me._Customer = CType(Nothing, EntityRef(Of Customer))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_orderID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property orderID() As Integer
		Get
			Return Me._orderID
		End Get
		Set
			If ((Me._orderID = value)  _
						= false) Then
				Me.OnorderIDChanging(value)
				Me.SendPropertyChanging
				Me._orderID = value
				Me.SendPropertyChanged("orderID")
				Me.OnorderIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_orderDate", DbType:="Date")>  _
	Public Property orderDate() As System.Nullable(Of Date)
		Get
			Return Me._orderDate
		End Get
		Set
			If (Me._orderDate.Equals(value) = false) Then
				Me.OnorderDateChanging(value)
				Me.SendPropertyChanging
				Me._orderDate = value
				Me.SendPropertyChanged("orderDate")
				Me.OnorderDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_orderTime", DbType:="Time")>  _
	Public Property orderTime() As System.Nullable(Of System.TimeSpan)
		Get
			Return Me._orderTime
		End Get
		Set
			If (Me._orderTime.Equals(value) = false) Then
				Me.OnorderTimeChanging(value)
				Me.SendPropertyChanging
				Me._orderTime = value
				Me.SendPropertyChanged("orderTime")
				Me.OnorderTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="VarChar(50)")>  _
	Public Property status() As String
		Get
			Return Me._status
		End Get
		Set
			If (String.Equals(Me._status, value) = false) Then
				Me.OnstatusChanging(value)
				Me.SendPropertyChanging
				Me._status = value
				Me.SendPropertyChanged("status")
				Me.OnstatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_custID", DbType:="Int NOT NULL")>  _
	Public Property custID() As Integer
		Get
			Return Me._custID
		End Get
		Set
			If ((Me._custID = value)  _
						= false) Then
				If Me._Customer.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OncustIDChanging(value)
				Me.SendPropertyChanging
				Me._custID = value
				Me.SendPropertyChanged("custID")
				Me.OncustIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Order1_Payment", Storage:="_Payments", ThisKey:="orderID", OtherKey:="orderID")>  _
	Public Property Payments() As EntitySet(Of Payment)
		Get
			Return Me._Payments
		End Get
		Set
			Me._Payments.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Order1_OrderDetail", Storage:="_OrderDetails", ThisKey:="orderID", OtherKey:="orderID")>  _
	Public Property OrderDetails() As EntitySet(Of OrderDetail)
		Get
			Return Me._OrderDetails
		End Get
		Set
			Me._OrderDetails.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Order1_Delivery1", Storage:="_Deliveries", ThisKey:="orderID", OtherKey:="orderID")>  _
	Public Property Deliveries() As EntitySet(Of Delivery)
		Get
			Return Me._Deliveries
		End Get
		Set
			Me._Deliveries.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Customer_Order1", Storage:="_Customer", ThisKey:="custID", OtherKey:="custID", IsForeignKey:=true)>  _
	Public Property Customer() As Customer
		Get
			Return Me._Customer.Entity
		End Get
		Set
			Dim previousValue As Customer = Me._Customer.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Customer.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Customer.Entity = Nothing
					previousValue.Orders.Remove(Me)
				End If
				Me._Customer.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Orders.Add(Me)
					Me._custID = value.custID
				Else
					Me._custID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Customer")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Payments(ByVal entity As Payment)
		Me.SendPropertyChanging
		entity.[Order] = Me
	End Sub
	
	Private Sub detach_Payments(ByVal entity As Payment)
		Me.SendPropertyChanging
		entity.[Order] = Nothing
	End Sub
	
	Private Sub attach_OrderDetails(ByVal entity As OrderDetail)
		Me.SendPropertyChanging
		entity.[Order] = Me
	End Sub
	
	Private Sub detach_OrderDetails(ByVal entity As OrderDetail)
		Me.SendPropertyChanging
		entity.[Order] = Nothing
	End Sub
	
	Private Sub attach_Deliveries(ByVal entity As Delivery)
		Me.SendPropertyChanging
		entity.[Order] = Me
	End Sub
	
	Private Sub detach_Deliveries(ByVal entity As Delivery)
		Me.SendPropertyChanging
		entity.[Order] = Nothing
	End Sub
End Class
